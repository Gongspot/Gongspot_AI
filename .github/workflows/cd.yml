name: CD - Deploy to Production

on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker metadata for tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/gongspot-ai
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,format=short

      - name: Clean up old Docker images
        run: |
          echo "Pruning unused Docker images and containers..."
          docker system prune -af

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags:
            |
            ${{ secrets.DOCKER_USERNAME }}/gongspot-ai:latest
            ${{ secrets.DOCKER_USERNAME }}/gongspot-ai:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH Key to Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e  # 오류 발생 시 즉시 종료

            echo "Cleaning up old Docker data..."
            docker system prune -af || true
            docker volume prune -f || true
            
            echo "Pulling the latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/gongspot-ai:latest

            echo "Stopping existing containers..."
            docker stop gongspot-ai || true

            echo "Removing old containers..."
            docker rm gongspot-ai || true

            echo "Starting new container..."
            docker run -d \
              --name gongspot-ai \
              -p 8000:8000 \
              --restart unless-stopped \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              ${{ secrets.DOCKER_USERNAME }}/gongspot-ai:latest
            echo "Deployment complete!"
          EOF